using UnityEngine;
using WraithavenGames.Bones3.Terrain;

namespace WraithavenGames.Bones3.Demo
{
	public class BasicPerlinNoise : WorldPopulator
	{
		private static int[] PrimeNumbers =
		{
			42359,17027,89431,57943,27367,51691,60167,94529,56179,12953,68521,22091,90803,38371,21683,23599,54623,18587,
			94649,42257,13613,57781,29363,58579,17657,69151,42437,69623,69233,62659,21179,43237,77977,31741,54287,85453,
			27743,79039,85363,40709,18307,71671,90373,67273,29129,39103,71237,97423,47653,96211,31991,21011,39979,50387,
			24841,41759,30707,33347,31051,31883,15107,13093,50047,52667,15383,65141,47581,77167,87221,54907,15727,42709,
			48869,88993,94889,32609,53899,17551,80107,59651,10391,78649,30271,61129,27737,49201,47431,34061,66107,78517,
			23743,90907,14461,21727,41081,60601,71867,24239,56611,65587,98773,57791,74923,90731,47521,11399,59627,78367,
			17159,48953,28087,23887,39343,99623,64007,28723,58027,68659,42043,25183,85513,62549,25463,29137,16843,59077,
			56827,49121,75997,44273,31193,87613,59753,11351,12157,50833,88241,55127,43391,80513,63599,15377,98939,33053,
			46351,42703,66239,29167,23011,30631,26893,49009,39847,36433,59069,53411,76541,17387,24809,70009,49633,74377,
			76163,99661,24793,92413,95651,21943,23687,49339,91691,35603,71413,97001,11161,98837,40819,65173,25579,75793,
			42139,64231,10589,43597,71359,25457,32987,49559,88069,17191,31601,66959,32717,50033,73547,33343,74149,44987,
			48649,53527,44797,39301,86677,44059,35897,42737,28433,39409,77647,33941,19121,29917,21491,10193,95203,47017,
			65827,13879,59473,61441,45553,95087,36847,19543,97303,24103,64157,72073,22303,99317,22861,55793,58211,12109,
			32833,58537,17431,30341,10301,87973,23371,85427,77263,20441,21163,32159,50671,94099,14639,73243,92863,55051,
			15173,28789,63079,62869,98911,34913,98929,31891,90523,83203,26849,53047,41269,20147,86143,55819,71059,80387,
			73907,81199,12437,98641,15767,83903,82471,90599,70549,33151,30661,84431,29983,24907,89003,82237,33937,65029,
			46589,73379,92893,92033,91151,98221,13397,63439,75743,10601,85091,93871,21751,77237,40123,78317,47269,67169,
			61403,18911,35117,88811,96181,79867,59951,13751,55603,35509,13723,39499,83939,45343,62057,14249,92381,32069,
			58321,73637,41593,51769,14479,11867,31267,43759,99907,47057,66431,83219,93491,94541,87133,30467,87049,19793,
			87877,25439,72227,64153,76403,52973,31321,34687,80849,35677,88789,96787,74597,32887,40787,70823,84377,58427,
			14779,65203,32117,41143,86011,14983,59281,60443,27191,24851,34631,92789,20023,18451,42899,29959,23957,18047,
			74887,13217,77681,58757,73589,44843,24169,26801,35401,82039,58337,65257,40499,71999,40939,33961,12037,23567,
			31219,27733,12613,19001,15919,31567,18457,87931,57859,43019,99083,84691,66499,59387,69761,10657,44453,67349,
			63367,11927,97879,86083,17021,87223,74929,82891,68059,62617,84559,40031,56993,81047,51673,24371,57571,39619,
			24133,46133,46601,10883,98443,53437,55441,32051,12781,91139,61051,58943,29389,96799,32441,16649,19541,43613,
			23813,12739,34843,83093,87277,47387,29443,17189,77369,56149,34919,53381,88657,25657,53077,32503,63743,57413,
			71453,83341,28111,84457,14731,53617,30253,62299,38821,53281,13249,11689,86501,28807,52069,64513,41597,90583,
			71881,91309,70379,58921,65063,68311,63247,70003,52813,92821,83791,15161,83077,60373
  		};

		[Header("Materials")]
		public Material grass;
		public Material dirt;
		public Material stone;

		[Header("Material Depths")]
		public int layersOfGrass = 1;
		public int layersOfDirt = 3;

		[Header("Noise")]
		public float smoothness = 150f;
		public float amplitude = 50f;
		public int iterations = 3;
		public int verticalOffset = 0;
		public bool autoRegenerate = false;

		public override void GenerateChunk(UngeneratedChunk chunk)
		{
			int x1 = chunk.chunkX * 16;
			int y1 = chunk.chunkY * 16;
			int z1 = chunk.chunkZ * 16;

			int x, y, z, y2, u;
			for (x = 0; x < 16; x++)
				for (z = 0; z < 16; z++)
				{
					y = GetTerrainHeight(x + x1, z + z1);

					for (y2 = 0; y2 < 16; y2++)
					{
						u = y - (y1 + y2);
						if (u < 0)
							break;

						if (u < layersOfGrass)
							chunk.SetMaterial(x, y2, z, grass);
						else if (u < layersOfGrass + layersOfDirt)
							chunk.SetMaterial(x, y2, z, dirt);
						else
							chunk.SetMaterial(x, y2, z, stone);
					}
				}
		}

		private int GetTerrainHeight(int x, int z)
		{
			float a = x / smoothness;
			float b = z / smoothness;

			float total = 0f;
			for (int i = 0; i < iterations; i++)
			{
				float pow = 1 << i;
				total += PerlinIteration(a * pow, b * pow, i) / (1 << (i + 1));
			}

			total = total * 0.5f + 0.5f;
			total *= amplitude;

			return Mathf.RoundToInt(total) + verticalOffset;
		}

		private float PerlinIteration(float x, float z, int depth)
		{
			int x1 = Mathf.FloorToInt(x);
			int z1 = Mathf.FloorToInt(z);
			float fracX = x - x1;
			float fracZ = z - z1;

			float a1 = RangeValue(x1, z1, depth);
			float a2 = RangeValue(x1 + 1, z1, depth);
			float a3 = RangeValue(x1, z1 + 1, depth);
			float a4 = RangeValue(x1 + 1, z1 + 1, depth);

			float b1 = Lerp(a1, a2, fracX);
			float b2 = Lerp(a3, a4, fracX);

			return Lerp(b1, b2, fracZ);
		}

		private float Lerp(float a, float b, float c)
		{
			return Mathf.Lerp(a, b, Mathf.Cos(c * Mathf.PI) * -0.5f + 0.5f);
		}

		private float RangeValue(int x, int z, int depth)
		{
			x += depth ^ z;
			z += depth ^ x;

			x += depth ^ z | PrimeNumbers[Mathf.Abs(x) % PrimeNumbers.Length];
			z += depth ^ x | PrimeNumbers[Mathf.Abs(z) % PrimeNumbers.Length];

			int a = PrimeNumbers[Mathf.Abs(x) % PrimeNumbers.Length];
			int b = PrimeNumbers[Mathf.Abs(z) % PrimeNumbers.Length];

			int c = a * b;

			return (c % 10000) / 10000f;
		}
	}
}
